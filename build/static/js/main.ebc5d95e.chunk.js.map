{"version":3,"sources":["logo.svg","Databutton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Databutton","props","handleClick","state","click","setState","activeName","apiCalls","fetch","baseurl","then","res","json","data","answer1","answer2","answer3","answer4","className","onClick","e","this","map","answer","Name","Count","PlanetName","PilotNames","item","PilotName","SpeciesName","React","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,sMC8G5BC,E,YA3GX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAaVC,YAAc,WACL,EAAKC,MAAMC,OAKZ,EAAKC,SAAS,CAAEC,WAAY,iBAC5B,EAAKD,SAAS,CAAED,OAAO,IACvB,EAAKG,aANL,EAAKF,SAAS,CAAEC,WAAY,WAC5B,EAAKD,SAAS,CAAED,OAAO,MAjBZ,EA2BnBG,SAAW,WACPC,MACK,EAAKL,MAAMM,QAAU,8BACrBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKR,SAAS,CAAES,QAASD,OAGjCL,MACI,EAAKL,MAAMM,QAAU,mCACpBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKR,SAAS,CAAEU,QAASF,OAGjCL,MACI,EAAKL,MAAMM,QAAU,uCACpBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKR,SAAS,CAAEW,QAASH,OAGjCL,MACI,EAAKL,MAAMM,QAAU,kDACpBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKR,SAAS,CAAEY,QAASJ,QAnDjC,EAAKV,MAAQ,CACTG,WAAY,SACZF,OAAO,EACPU,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTR,QAAQ,iDATG,E,sEA0DT,IAAD,OACL,OACI,6BACI,yBAAKS,UAAU,eACXC,QAAS,SAACC,GAAD,OAAO,EAAKlB,gBACrB,4BAAQgB,UAAWG,KAAKlB,MAAMG,YAC1B,0BAAMY,UAAU,kCAChB,0BAAMA,UAAU,cAAhB,kCACA,0BAAMA,UAAU,oCAEpB,uBAAGA,UAAYG,KAAKlB,MAAMC,MAA0B,SAAlB,iBAAlC,2DAGA,uBAAGc,UAAYG,KAAKlB,MAAMC,MAAwB,SAAhB,eAC7BiB,KAAKlB,MAAMW,SAEhB,uBAAGI,UAAYG,KAAKlB,MAAMC,MAA0B,SAAlB,iBAAlC,mEAGA,uBAAGc,UAAYG,KAAKlB,MAAMC,MAAwB,SAAhB,eAC7BiB,KAAKlB,MAAMY,SAEhB,uBAAGG,UAAYG,KAAKlB,MAAMC,MAA0B,SAAlB,iBAAlC,gEAGA,uBAAGc,UAAYG,KAAKlB,MAAMC,MAAwB,SAAhB,eAC7BiB,KAAKlB,MAAMa,QAAQM,KAAI,SAACC,GAAD,OACpB,2BAAIA,EAAOC,KAAX,KAAmBD,EAAOE,MAA1B,SAGR,uBAAGP,UAAYG,KAAKlB,MAAMC,MAA0B,SAAlB,iBAAlC,+EAGA,uBAAGc,UAAYG,KAAKlB,MAAMC,MAAwB,SAAhB,eAC7BiB,KAAKlB,MAAMc,QAAQK,KAAI,SAACC,GAAD,OACpB,sCAAYA,EAAOG,WAAnB,eAA2CH,EAAOE,MAAlD,IAEQF,EAAOI,WAAWL,KAAI,SAAAM,GAClB,OAAQ,kCAAQA,EAAKC,UAAb,MAA2BD,EAAKE,YAAhC,oB,GAjGvBC,IAAMC,WCchBC,MAXf,WACI,OACI,yBAAKf,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKgB,IAAKC,IAAMjB,UAAU,WAAWkB,IAAI,SACzC,kBAAC,EAAD,SCEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ebc5d95e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0a12a758.svg\";","import React from \"react\";\r\nimport \"./App.css\";\r\nclass Databutton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeName: \"button\",\r\n            click: true,\r\n            answer1: \"\",\r\n            answer2: \"\",\r\n            answer3: [],\r\n            answer4: [],\r\n            baseurl:\"https://master.d139kze7isi5si.amplifyapp.com/\"\r\n        }\r\n    }\r\n\r\n    //click for assigning class for button and for showing data\r\n    handleClick = () => {\r\n        if (!this.state.click) {\r\n            this.setState({ activeName: \"button\" });\r\n            this.setState({ click: true });\r\n        }\r\n        else {\r\n            this.setState({ activeName: \"activeButton\" });\r\n            this.setState({ click: false });\r\n            this.apiCalls();\r\n        }\r\n    }\r\n\r\n    //For calling api\r\n    apiCalls = () => {\r\n        fetch(\r\n             this.state.baseurl + \"/api/Films/getLongestCrawl\")\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ answer1: data })\r\n            })\r\n\r\n        fetch(\r\n            this.state.baseurl + \"/api/Persons/getMostActedPerson\")\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ answer2: data })\r\n            })\r\n\r\n        fetch(\r\n            this.state.baseurl + \"/api/Species/getMostNumberOfSpecies\")\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ answer3: data })\r\n            })\r\n\r\n        fetch(\r\n            this.state.baseurl + \"/api/Vechicle/getLargestNumberOfVechiclePilots\")\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ answer4: data })\r\n            })\r\n    }\r\n\r\n    //Html for button and data\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"form-control\"\r\n                    onClick={(e) => this.handleClick()}>\r\n                    <button className={this.state.activeName}>\r\n                        <span className=\"fa fa-star leftAlign starSize\" />\r\n                        <span className=\"centerText\">Do. Or do not. There is no try</span>\r\n                        <span className=\"fa fa-star rightAlign starSize\" />\r\n                    </button>\r\n                    <p className={!this.state.click ? \"questionClass\" : \"hidden\"}>\r\n                        Which of all StarWars movies has longest opening crawl?\r\n                    </p>\r\n                    <p className={!this.state.click ? \"answerClass\" : \"hidden\"}>\r\n                        {this.state.answer1}\r\n                    </p>\r\n                    <p className={!this.state.click ? \"questionClass\" : \"hidden\"}>\r\n                        What character (person) appeared in the most of StarWars films?\r\n                    </p>\r\n                    <p className={!this.state.click ? \"answerClass\" : \"hidden\"}>\r\n                        {this.state.answer2}\r\n                    </p>\r\n                    <p className={!this.state.click ? \"questionClass\" : \"hidden\"}>\r\n                        Which species appeared in the most number of StarWars films?\r\n                    </p>\r\n                    <p className={!this.state.click ? \"answerClass\" : \"hidden\"}>\r\n                        {this.state.answer3.map((answer) => (\r\n                            <p>{answer.Name} ({answer.Count})</p>\r\n                        ))}\r\n                    </p>\r\n                    <p className={!this.state.click ? \"questionClass\" : \"hidden\"}>\r\n                        What planet in StarWars universe provided largest number of vehicle pilots?\r\n                    </p>\r\n                    <p className={!this.state.click ? \"answerClass\" : \"hidden\"}>\r\n                        {this.state.answer4.map((answer) => (\r\n                            <p>Planet: {answer.PlanetName} - Pilots: ({answer.Count})\r\n                               {\r\n                                    answer.PilotNames.map(item => {\r\n                                        return (<span> {item.PilotName} - {item.SpeciesName}, </span>)\r\n                                    })\r\n                                }\r\n                            </p>\r\n                        ))}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Databutton;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Databutton from \"./Databutton.js\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <Databutton />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}